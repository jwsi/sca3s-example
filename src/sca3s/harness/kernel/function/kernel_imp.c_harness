/* Copyright (C) 2018 SCARV project <info@scarv.org>
 *
 * Use of this source code is restricted per the MIT license, a copy of which 
 * can be found at https://opensource.org/licenses/MIT (or should be included 
 * as LICENSE.txt within the associated archive or repository).
 */

// ============================================================================

#define KERNEL_ID VERSION ":" KERNEL

#pragma message( "?data fec"    " = " INT(       SIZEOF_FEC) )
#pragma message( "?data fcc"    " = " INT(       SIZEOF_FCC) )
#pragma message( "?data esr"    " = " INT(KERNEL_SIZEOF_ESR) )
#pragma message( "?data x"      " = " INT(KERNEL_SIZEOF_X   ) )
#pragma message( "?data r"      " = " INT(KERNEL_SIZEOF_R   ) )

#pragma message( "#data fec"    " = " INT(       SIZEOF_FEC) )
#pragma message( "#data fcc"    " = " INT(       SIZEOF_FCC) )
#pragma message( "#data esr"    " = " INT(KERNEL_SIZEOF_ESR) )
#pragma message( "#data x"      " = " INT(KERNEL_SIZEOF_X  ) )
#pragma message( "#data r"      " = " INT(KERNEL_SIZEOF_R  ) )

#pragma message( "?kernel_id"   " = "     KERNEL_ID          )

#pragma message( ">kernel_data" " = "     "esr" "," "x"      )
#pragma message( "<kernel_data" " = " "fec,fcc" "," "r"      )

// ============================================================================

/** @brief      A register that contains the externally supplied randomness.
  */

uint8_t esr[ KERNEL_SIZEOF_ESR ] = { KERNEL_INITOF_ESR };

/** @brief      A register that contains the function exit code.
  */

kernel_fec_t fec = KERNEL_FEC_SUCCESS;

/** @brief      A register that contains the function cycle count.
  */

kernel_fcc_t fcc = 0;

/** @brief      A register that contains the  input to   r = f( x ).
  */

uint8_t   x[ KERNEL_SIZEOF_X   ] = { KERNEL_INITOF_X   };

/** @brief      A register that contains the output from r = f( x ).
  */

uint8_t   r[ KERNEL_SIZEOF_R   ] = { KERNEL_INITOF_R   };

// ----------------------------------------------------------------------------

/** @brief      Number of used bytes in register that contains the  input to   r = f( x ).
  */

uint8_t n_x = 0;

/** @brief      Number of used bytes in register that contains the output from r = f( x ).
  */

uint8_t n_r = 0;

// ----------------------------------------------------------------------------

/** @brief      Generate a kernel identifier string.
  *
  * @param[out] x a (pointer to a) buffer into which the identifier string is copied
  *
  * @note       By convention, the identifier string constitutes a sequence 
  *             of colon-separated fields; to allow the string to be parsed, 
  *             the first two fields must be \c VERSION and \c KERNEL.
  */

void kernel_id( char* x ) {
  strcpy( x, KERNEL_ID );
}

/** @brief      Execute a NOP.
  *
  * @return     an instance of \c kernel_fec_t, 
  *             e.g.,
  *             \c KERNEL_FEC_FAILURE to indicate failure
  *             or 
  *             \c KERNEL_FEC_SUCCESS to indicate success;
  *             this is captured in \c fec, the function exit code register.
  */

kernel_fec_t kernel_nop() {
  return KERNEL_FEC_SUCCESS;
}

kernel_fec_t kernel_prologue();
kernel_fec_t kernel();
kernel_fec_t kernel_epilogue();

/** @brief      A specification of the
  *             registers
  *             accessible within the kernel.
  *
  * @note       By setting \c .id equal to \c NULL, the entry will act as a
  *             terminator for the array; such a terminator entry must exist
  *             as the final entry.
  */

kernel_data_spec_t kernel_data_spec[] = {
// kernel-agnostic
  { .id = "esr", .data = ( uint8_t* )(  esr ), .used = ( uint8_t* )( NULL ), .size = KERNEL_SIZEOF_ESR, .type = KERNEL_DATA_TYPE_I    },
  { .id = "fec", .data = ( uint8_t* )( &fec ), .used = ( uint8_t* )( NULL ), .size =        SIZEOF_FEC, .type = KERNEL_DATA_TYPE_O    },
  { .id = "fcc", .data = ( uint8_t* )( &fcc ), .used = ( uint8_t* )( NULL ), .size =        SIZEOF_FCC, .type = KERNEL_DATA_TYPE_O    },
// kernel-specific
  { .id =   "x", .data = ( uint8_t* )(    x ), .used = ( uint8_t* )( &n_x ), .size = KERNEL_SIZEOF_X,   .type = KERNEL_DATA_TYPE_I    },
  { .id =   "r", .data = ( uint8_t* )(    r ), .used = ( uint8_t* )( &n_r ), .size = KERNEL_SIZEOF_R,   .type = KERNEL_DATA_TYPE_O    },
// terminator
  { .id =  NULL, .data = ( uint8_t* )( NULL ), .used = ( uint8_t* )( NULL ), .size = 0,                 .type = KERNEL_DATA_TYPE_NONE }
};

/** @brief      A specification of the
  *             functions
  *             accessible within the kernel.
  */

kernel_func_spec_t kernel_func_spec   = {
  .kernel_id       = kernel_id,

  .kernel_prologue = kernel_prologue,
  .kernel          = kernel,
  .kernel_epilogue = kernel_epilogue,

  .kernel_nop      = kernel_nop
};

// ============================================================================

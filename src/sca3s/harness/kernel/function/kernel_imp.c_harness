/* Copyright (C) 2018 SCARV project <info@scarv.org>
 *
 * Use of this source code is restricted per the MIT license, a copy of which 
 * can be found at https://opensource.org/licenses/MIT (or should be included 
 * as LICENSE.txt within the associated archive or repository).
 */

// ============================================================================

#define KERNEL_ID VERSION ":" KERNEL

#pragma message( "?data tsc"    " = "     "0"              )
#pragma message( "?data x"      " = " INT(KERNEL_SIZEOF_X) )
#pragma message( "?data r"      " = " INT(KERNEL_SIZEOF_R) )

#pragma message( "#data tsc"    " = "     "0"              )
#pragma message( "#data x"      " = " INT(KERNEL_SIZEOF_X) )
#pragma message( "#data r"      " = " INT(KERNEL_SIZEOF_R) )

#pragma message( "?kernel_id"   " = "     KERNEL_ID        )

#pragma message( ">kernel_data" " = "     "x"              )
#pragma message( "<kernel_data" " = "     "r"              )

// ============================================================================

/** @brief      A                 data buffer that houses x (the  input to   r = f( x )).
  */

uint8_t x[ KERNEL_SIZEOF_X ] = { KERNEL_INITOF_X };

/** @brief      A                 data buffer that houses r (the output from r = f( x )).
  */

uint8_t r[ KERNEL_SIZEOF_R ] = { KERNEL_INITOF_R };

/** @brief      Used bytes within data buffer that houses x (the  input to   r = f( x )).
  */

uint8_t n_x = 0;

/** @brief      Used bytes within data buffer that houses r (the output from r = f( x )).
  */

uint8_t n_r = 0;

/** @brief      Generate a kernel identifier string.
  *
  * @param[out] x a (pointer to a) buffer into which the identifier string is copied
  *
  * @note       By convention, the identifier string constitutes a sequence 
  *             of colon-separated fields; to allow the string to be parsed, 
  *             the first two fields must be \c VERSION and \c KERNEL.
  */

void kernel_id( char* x ) {
  strcpy( x, KERNEL_ID );
}

bool kernel_prologue();
bool kernel();
bool kernel_epilogue();

/** @brief      A specification of the
  *             data buffers
  *             accessible within the kernel.
  *
  * @note       By setting \c .id equal to \c NULL, the entry will act as a
  *             terminator for the array; such a terminator entry must exist
  *             as the final entry.
  */

kernel_data_spec_t kernel_data_spec[] = {
  { .id = "tsc", .data = ( uint8_t* )( &kernel_tsc ), .used = ( uint8_t* )( NULL ), .size = SIZEOF( kernel_tsc ), .type = KERNEL_DATA_TYPE_O    },

  { .id =   "x", .data = ( uint8_t* )(           x ), .used = ( uint8_t* )( &n_x ), .size = SIZEOF(          x ), .type = KERNEL_DATA_TYPE_I    },
  { .id =   "r", .data = ( uint8_t* )(           r ), .used = ( uint8_t* )( &n_r ), .size = SIZEOF(          r ), .type = KERNEL_DATA_TYPE_O    },

  { .id =  NULL, .data = ( uint8_t* )(        NULL ), .used = ( uint8_t* )( NULL ), .size =       (          0 ), .type = KERNEL_DATA_TYPE_NONE }
};

/** @brief      A specification of the
  *             functions
  *             accessible within the kernel.
  */

kernel_func_spec_t kernel_func_spec   = {
  .kernel_id       = kernel_id,

  .kernel_prologue = kernel_prologue,
  .kernel          = kernel,
  .kernel_epilogue = kernel_epilogue
};

// ============================================================================
